{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":7876,"sourceType":"datasetVersion","datasetId":5227}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.368576Z","iopub.execute_input":"2025-04-06T00:50:11.368918Z","iopub.status.idle":"2025-04-06T00:50:11.377581Z","shell.execute_reply.started":"2025-04-06T00:50:11.368895Z","shell.execute_reply":"2025-04-06T00:50:11.376768Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn import datasets\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n#from sklearn.ensemble import RandomForestRegressor\n#from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.378723Z","iopub.execute_input":"2025-04-06T00:50:11.379016Z","iopub.status.idle":"2025-04-06T00:50:11.390364Z","shell.execute_reply.started":"2025-04-06T00:50:11.378987Z","shell.execute_reply":"2025-04-06T00:50:11.389585Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Chargement des donn√©es\ndf = pd.read_csv(\"/kaggle/input/california-housing-prices/housing.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.391684Z","iopub.execute_input":"2025-04-06T00:50:11.391944Z","iopub.status.idle":"2025-04-06T00:50:11.426381Z","shell.execute_reply.started":"2025-04-06T00:50:11.391925Z","shell.execute_reply":"2025-04-06T00:50:11.425832Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"housing_with_id = df.reset_index() # adds an `index` column\n#Train-set and Test-set\ntrain_set, test_set = train_test_split(df, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.427634Z","iopub.execute_input":"2025-04-06T00:50:11.427918Z","iopub.status.idle":"2025-04-06T00:50:11.444014Z","shell.execute_reply.started":"2025-04-06T00:50:11.427890Z","shell.execute_reply":"2025-04-06T00:50:11.443251Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Faire le stratified sampling\ndf[\"income_cat\"] = pd.cut(df[\"median_income\"],\nbins=[0., 1.5, 3.0, 4.5, 6., np.inf],\nlabels=[1, 2, 3, 4, 5])\ndf[\"income_cat\"].hist()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.444799Z","iopub.execute_input":"2025-04-06T00:50:11.444998Z","iopub.status.idle":"2025-04-06T00:50:11.749863Z","shell.execute_reply.started":"2025-04-06T00:50:11.444982Z","shell.execute_reply":"2025-04-06T00:50:11.749004Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Une division representative de l'ensemble du dataset\nfrom sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(df, df[\"income_cat\"]):\n    strat_train_set = df.loc[train_index]\n    strat_test_set = df.loc[test_index]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.750700Z","iopub.execute_input":"2025-04-06T00:50:11.750986Z","iopub.status.idle":"2025-04-06T00:50:11.768025Z","shell.execute_reply.started":"2025-04-06T00:50:11.750964Z","shell.execute_reply":"2025-04-06T00:50:11.766982Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Retour au dataset normal\nfor set_ in (strat_train_set, strat_test_set):\n    set_.drop(\"income_cat\", axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.769022Z","iopub.execute_input":"2025-04-06T00:50:11.769416Z","iopub.status.idle":"2025-04-06T00:50:11.778016Z","shell.execute_reply.started":"2025-04-06T00:50:11.769384Z","shell.execute_reply":"2025-04-06T00:50:11.777249Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Labels and datas\nhousing = strat_train_set.drop(\"median_house_value\", axis=1) \nhousing_labels = strat_train_set[\"median_house_value\"].copy() \nif isinstance(housing, np.ndarray):\n    print(\"data est un numpy array.\")\nelse:\n    print(\"data n'est pas un numpy array.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.778893Z","iopub.execute_input":"2025-04-06T00:50:11.779174Z","iopub.status.idle":"2025-04-06T00:50:11.785915Z","shell.execute_reply.started":"2025-04-06T00:50:11.779152Z","shell.execute_reply":"2025-04-06T00:50:11.785206Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Install the requiered estimators\nfrom sklearn.impute import SimpleImputer \nfrom sklearn.preprocessing import OrdinalEncoder\n#Processing to One-hot encoding\nfrom sklearn.preprocessing import OneHotEncoder\n#Feature scaling\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import cross_val_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.788714Z","iopub.execute_input":"2025-04-06T00:50:11.788966Z","iopub.status.idle":"2025-04-06T00:50:11.906856Z","shell.execute_reply.started":"2025-04-06T00:50:11.788947Z","shell.execute_reply":"2025-04-06T00:50:11.906194Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#CUstom transformers\n#un transformers qui combine les attributs\nfrom sklearn.base import BaseEstimator, TransformerMixin\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self, X, y=None):\n        return self # nothing else to do\n    def transform(self, X, y=None):\n        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]\n        population_per_household = X[:, population_ix] / X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household,\n        bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]\nattr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\n#Convertion de housing en np.array\nhousingNp=housing.to_numpy()\nhousing_extra_attribs = attr_adder.transform(housingNp)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.907991Z","iopub.execute_input":"2025-04-06T00:50:11.908241Z","iopub.status.idle":"2025-04-06T00:50:11.922917Z","shell.execute_reply.started":"2025-04-06T00:50:11.908211Z","shell.execute_reply":"2025-04-06T00:50:11.922162Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.923620Z","iopub.execute_input":"2025-04-06T00:50:11.923858Z","iopub.status.idle":"2025-04-06T00:50:11.933991Z","shell.execute_reply.started":"2025-04-06T00:50:11.923840Z","shell.execute_reply":"2025-04-06T00:50:11.933242Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Entrainer avec des echantillons\nhousing_sample = housing.sample(500, random_state=42)\nlabels_sample = housing_labels.loc[housing_sample.index]\nif isinstance(housing_sample, pd.DataFrame):\n    print(\"data est un DataFrame.\")\nelse:\n    print(\"data n'est pas un numpy array.\")\n\nhousing_sample.iloc[:2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:11.934828Z","iopub.execute_input":"2025-04-06T00:50:11.935100Z","iopub.status.idle":"2025-04-06T00:50:12.034162Z","shell.execute_reply.started":"2025-04-06T00:50:11.935074Z","shell.execute_reply":"2025-04-06T00:50:12.033472Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\nimport joblib","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:12.034980Z","iopub.execute_input":"2025-04-06T00:50:12.035304Z","iopub.status.idle":"2025-04-06T00:50:12.164317Z","shell.execute_reply.started":"2025-04-06T00:50:12.035275Z","shell.execute_reply":"2025-04-06T00:50:12.163748Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Complete function to train the model\ndef model_trainer_SVR(data,labels):\n    \n    #Drop categorical attribute\n    num_data = data.drop(\"ocean_proximity\", axis=1)\n   \n    #Handling categorical attributes\n    cat_attribs = data[[\"ocean_proximity\"]]\n    \n\n    #Numeric pipeline\n\n    num_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attribs_adder',CombinedAttributesAdder(add_bedrooms_per_room=False)),\n    ('std_scaler', StandardScaler()),\n    ])\n\n    cat_pipeline = Pipeline([\n        ('encoder', OneHotEncoder())\n    ])\n\n    \n\n    # ColumnTransformer pour combiner les deux pipelines\n    full_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_data.columns),\n        (\"cat\", cat_pipeline, ['ocean_proximity'])\n    ])\n    \n\n    svr_pipeline = Pipeline([\n        ('preparation', full_pipeline), \n        ('svr', SVR(kernel='rbf'))       \n    ])\n\n        # Grille d‚Äôhyperparam√®tres pour RBF\n    param_grid = {\n        'svr__C': [10,100, 1000,10000],             # Plus C est grand, plus le mod√®le est flexible\n        'svr__epsilon': [0.01,0.1, 0.5,1],      # Plus epsilon est petit, plus le mod√®le est pr√©cis\n        'svr__gamma': [0.01,0.1,0.2,1]           # gamma petit = mod√®le plus lisse\n    }\n    \n    # GridSearch avec validation crois√©e\n    grid_search = GridSearchCV(\n        svr_pipeline,\n        param_grid,\n        cv=5,\n        scoring='neg_mean_squared_error',  # car on veut minimiser l'erreur\n        verbose=2,                         # pour suivre la progression\n        n_jobs=-1                          # utiliser tous les c≈ìurs du CPU\n    )\n    grid_search.fit(data, labels)\n    \n    # Sauvegarde uniquement du meilleur mod√®le entra√Æn√©\n    joblib.dump(grid_search.best_estimator_, \"model_SVR.pkl\")\n    \n    # R√©sultats\n    print(\"Meilleurs hyperparam√®tres trouv√©s :\")\n    print(grid_search.best_params_)\n    \n    print(\"Meilleur RMSE :\")\n    print(np.sqrt(-grid_search.best_score_))\n    \n    # Retourne juste le pipeline final entra√Æn√©\n    return grid_search.best_estimator_\n\n    \n    \n        \n       ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:12.165075Z","iopub.execute_input":"2025-04-06T00:50:12.165322Z","iopub.status.idle":"2025-04-06T00:50:12.171537Z","shell.execute_reply.started":"2025-04-06T00:50:12.165303Z","shell.execute_reply":"2025-04-06T00:50:12.170688Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"final_model_SVR = model_trainer_SVR(housing_sample,labels_sample)\nfinal_model_SVR","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:12.172349Z","iopub.execute_input":"2025-04-06T00:50:12.172623Z","iopub.status.idle":"2025-04-06T00:50:17.526412Z","shell.execute_reply.started":"2025-04-06T00:50:12.172604Z","shell.execute_reply":"2025-04-06T00:50:17.525642Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Complete function to train the model\ndef model_trainer_RandomForestRegressor(data,labels):\n    #Drop categorical attribute\n    num_data = data.drop(\"ocean_proximity\", axis=1)\n   \n    #Handling categorical attributes\n    cat_attribs = data[[\"ocean_proximity\"]]\n    \n\n    #Numeric pipeline\n\n    num_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attribs_adder',CombinedAttributesAdder(add_bedrooms_per_room=False)),\n    ('std_scaler', StandardScaler()),\n    ])\n\n    cat_pipeline = Pipeline([\n        ('encoder', OneHotEncoder())\n    ])\n\n    \n\n    # ColumnTransformer pour combiner les deux pipelines\n    full_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_data.columns),\n        (\"cat\", cat_pipeline, ['ocean_proximity'])\n    ])\n    \n  \n    \n    rfr_pipeline = Pipeline([\n    ('preparation', full_pipeline), \n    ('RFR', RandomForestRegressor())       \n    ])\n\n    \n    # Grille des hyperparam√®tres avec les pr√©fixes appropri√©s pour RandomForestRegressor\n    param_grid = [\n        {'RFR__n_estimators': [3, 10, 30], 'RFR__max_features': [2, 4, 6, 8]},\n        {'RFR__bootstrap': [False], 'RFR__n_estimators': [3, 10], 'RFR__max_features': [2, 3, 4]},\n    ]\n    \n    grid_search = GridSearchCV(rfr_pipeline, param_grid, cv=5,\n                              scoring='neg_mean_squared_error', return_train_score=True)\n    grid_search.fit(data, labels)\n    joblib.dump(grid_search.best_estimator_, \"model_RFR.pkl\")\n\n    \n   \n    # R√©sultats\n    print(\"Meilleurs hyperparam√®tres trouv√©s :\")\n    print(grid_search.best_params_)\n    \n    print(\"Meilleur RMSE :\")\n    print(np.sqrt(-grid_search.best_score_))\n    return grid_search.best_estimator_\n    \n        \n       ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:17.527276Z","iopub.execute_input":"2025-04-06T00:50:17.527572Z","iopub.status.idle":"2025-04-06T00:50:17.533764Z","shell.execute_reply.started":"2025-04-06T00:50:17.527536Z","shell.execute_reply":"2025-04-06T00:50:17.533002Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"final_model_RFR=model_trainer_RandomForestRegressor(housing_sample,labels_sample)\nfinal_model_RFR","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:17.534529Z","iopub.execute_input":"2025-04-06T00:50:17.534734Z","iopub.status.idle":"2025-04-06T00:50:21.015076Z","shell.execute_reply.started":"2025-04-06T00:50:17.534708Z","shell.execute_reply":"2025-04-06T00:50:21.014370Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def model_trainer_LinearRegression(data,labels):\n     #Drop categorical attribute\n    num_data = data.drop(\"ocean_proximity\", axis=1)\n   \n    #Handling categorical attributes\n    cat_attribs = data[[\"ocean_proximity\"]]\n    \n\n    #Numeric pipeline\n\n    num_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attribs_adder',CombinedAttributesAdder(add_bedrooms_per_room=False)),\n    ('std_scaler', StandardScaler()),\n    ])\n\n    cat_pipeline = Pipeline([\n        ('encoder', OneHotEncoder())\n    ])\n\n    \n    # ColumnTransformer pour combiner les deux pipelines\n    full_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_data.columns),\n        (\"cat\", cat_pipeline, ['ocean_proximity'])\n    ])\n    \n    lr_pipeline = Pipeline([\n    ('preparation', full_pipeline), \n    ('LR', LinearRegression())       \n    ])\n\n    \n    #Making Cross-Validation\n    #10 entra√Ænements complets du mod√®le sont r√©alis√©s. Avec un mod√®le lourd comme ton SVM polynomial, √ßa devient rapidement tr√®s lent.\n    scores = cross_val_score(lr_pipeline, data, labels,\n                scoring=\"neg_mean_squared_error\", cv=10)\n    lr_rmse_scores = np.sqrt(-scores)\n    # 2. Fit le pipeline sur **toutes** les donn√©es (en entier)\n    lr_pipeline.fit(data, labels)\n    \n    joblib.dump(lr_pipeline, \"model_LR.pkl\")\n\n    \n    #Displaying scores\n    display_scores(lr_rmse_scores)\n\n    return lr_pipeline\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:21.015931Z","iopub.execute_input":"2025-04-06T00:50:21.016157Z","iopub.status.idle":"2025-04-06T00:50:21.021890Z","shell.execute_reply.started":"2025-04-06T00:50:21.016127Z","shell.execute_reply":"2025-04-06T00:50:21.020942Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"final_model_LR = model_trainer_LinearRegression(housing_sample,labels_sample)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:21.022646Z","iopub.execute_input":"2025-04-06T00:50:21.022937Z","iopub.status.idle":"2025-04-06T00:50:21.202202Z","shell.execute_reply.started":"2025-04-06T00:50:21.022909Z","shell.execute_reply":"2025-04-06T00:50:21.201490Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def model_trainer_DecissionTreeRegressor(data,labels):\n     #Drop categorical attribute\n    num_data = data.drop(\"ocean_proximity\", axis=1)\n   \n    #Handling categorical attributes\n    cat_attribs = data[[\"ocean_proximity\"]]\n    \n\n    #Numeric pipeline\n\n    num_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('attribs_adder',CombinedAttributesAdder(add_bedrooms_per_room=False)),\n    ('std_scaler', StandardScaler()),\n    ])\n\n    cat_pipeline = Pipeline([\n        ('encoder', OneHotEncoder())\n    ])\n\n    \n    # ColumnTransformer pour combiner les deux pipelines\n    full_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_data.columns),\n        (\"cat\", cat_pipeline, ['ocean_proximity'])\n    ])\n    \n    dtr_pipeline = Pipeline([\n    ('preparation', full_pipeline), \n    ('DTR', DecisionTreeRegressor())       \n    ])\n\n    \n   \n\n    param_distribs = {\n        'DTR__max_depth': [3, 5, 10, None],\n        'DTR__min_samples_split': randint(2, 20),\n        'DTR__min_samples_leaf': randint(1, 20),\n        'DTR__max_features': ['sqrt', 'log2', None]\n    }\n    \n    rnd_search = RandomizedSearchCV(dtr_pipeline, param_distribs,\n                                    n_iter=30, cv=5,\n                                    scoring='neg_mean_squared_error',\n                                    random_state=42)\n    rnd_search.fit(data, labels)  # ou directement un pipeline complet\n    \n    joblib.dump(rnd_search.best_estimator_, \"model_TR.pkl\")\n    \n    \n\n    print(\"Meilleurs hyperparam√®tres :\", rnd_search.best_params_)\n    print(\"Meilleur RMSE :\", np.sqrt(-rnd_search.best_score_))\n    return rnd_search.best_estimator_\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:21.203031Z","iopub.execute_input":"2025-04-06T00:50:21.203275Z","iopub.status.idle":"2025-04-06T00:50:21.210168Z","shell.execute_reply.started":"2025-04-06T00:50:21.203255Z","shell.execute_reply":"2025-04-06T00:50:21.209453Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"final_model_TR = model_trainer_DecissionTreeRegressor(housing_sample,labels_sample)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:21.211062Z","iopub.execute_input":"2025-04-06T00:50:21.211373Z","iopub.status.idle":"2025-04-06T00:50:22.981555Z","shell.execute_reply.started":"2025-04-06T00:50:21.211345Z","shell.execute_reply":"2025-04-06T00:50:22.980885Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Sauvegarde du mod√®le entra√Æn√©\njoblib.dump(final_model_RFR, \"model_RFR.pkl\")\njoblib.dump(final_model_SVR, \"model_SVR.pkl\")\njoblib.dump(final_model_LR, \"model_LR.pkl\")\njoblib.dump(final_model_TR, \"model_TR.pkl\")\nprint(\"Mod√®le sauvegard√© sous model.pkl\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:22.982360Z","iopub.execute_input":"2025-04-06T00:50:22.982585Z","iopub.status.idle":"2025-04-06T00:50:23.008389Z","shell.execute_reply.started":"2025-04-06T00:50:22.982559Z","shell.execute_reply":"2025-04-06T00:50:23.007750Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install gradio","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:23.009089Z","iopub.execute_input":"2025-04-06T00:50:23.009377Z","iopub.status.idle":"2025-04-06T00:50:33.376480Z","shell.execute_reply.started":"2025-04-06T00:50:23.009350Z","shell.execute_reply":"2025-04-06T00:50:33.375646Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import json\n\nscores = {\n    \"RandomForest\": 64080.65741243783,\n    \"SVR (Polynomial)\": 85888.49622623913,\n    \"Linear Regression\":  68627.9851886692,\n    \"Decision Tree\": 72088.5889239283\n}\n\nwith open(\"model_scores.json\", \"w\") as f:\n    json.dump(scores, f, indent=2)\n\nprint(\"Fichier model_scores.json cr√©√© avec succ√®s.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:33.377416Z","iopub.execute_input":"2025-04-06T00:50:33.377666Z","iopub.status.idle":"2025-04-06T00:50:33.383439Z","shell.execute_reply.started":"2025-04-06T00:50:33.377647Z","shell.execute_reply":"2025-04-06T00:50:33.382535Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import gradio as gr\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n\n# üîÅ Chargement des mod√®les sauvegard√©s\nmodel_RFR = joblib.load(\"model_RFR.pkl\")\nmodel_SVR = joblib.load(\"model_SVR.pkl\")\nmodel_LR = joblib.load(\"model_LR.pkl\")\nmodel_TR = joblib.load(\"model_TR.pkl\")\n\n# üìä Fonction pour pr√©dire avec tous les mod√®les et afficher le meilleur\ndef predict_price(longitude, latitude, housing_median_age, total_rooms,\n                  total_bedrooms, population, households, median_income,\n                  ocean_proximity):\n\n    # Cr√©ation d'un DataFrame pandas avec les donn√©es d'entr√©e\n    input_data = pd.DataFrame([[\n        longitude, latitude, housing_median_age, total_rooms,\n        total_bedrooms, population, households, median_income,\n        ocean_proximity\n    ]], columns=[\n        \"longitude\", \"latitude\", \"housing_median_age\", \"total_rooms\",\n        \"total_bedrooms\", \"population\", \"households\", \"median_income\", \"ocean_proximity\"\n    ])\n\n    # Pr√©dictions avec chaque mod√®le (les mod√®les sont d√©j√† form√©s avec le pipeline complet)\n    models = {\n        \"RandomForest\": model_RFR,\n        \"SVR (Polynomial)\": model_SVR,\n        \"Linear Regression\": model_LR,\n        \"Decision Tree\": model_TR\n    }\n    results = {}\n    for name, model in models.items():\n        try:\n            # Pr√©diction avec chaque mod√®le (le pr√©traitement est d√©j√† int√©gr√© dans les pipelines des mod√®les)\n            pred = model.predict(input_data)[0]\n            results[name] = pred\n        except Exception as e:\n            results[name] = f\"Erreur: {e}\"\n\n    # üéØ Meilleur mod√®le (valeur pr√©dictive la plus basse ici comme exemple)\n    best_model = min(results, key=lambda k: results[k] if isinstance(results[k], float) else float('inf'))\n    best_predict = model_RFR.predict(input_data)[0]\n    \n\n    # Charger les scores RMSE manuellement d√©finis\n    with open(\"model_scores.json\") as f:\n        saved_scores = json.load(f)\n    \n    # üéØ Meilleur mod√®le (le plus petit RMSE)\n    best_model = min(saved_scores, key=saved_scores.get)\n    \n    # üìà Graphe bas√© sur les scores\n    fig, ax = plt.subplots()\n    ax.bar(saved_scores.keys(), saved_scores.values(), color='skyblue')\n    ax.set_ylabel(\"RMSE\")\n    ax.set_title(\"Comparaison des mod√®les (RMSE)\")\n    plt.xticks(rotation=10)\n    \n    # üèÜ Texte\n    best_rmse = saved_scores[best_model]\n    rmse_text = f\"üí∞ RMSE : {best_rmse:,.2f}\"\n    \n    return f\"üèÜ Meilleur mod√®le : {best_model}\\n{rmse_text}\\n Meilleur prediction :{best_predict}\", fig\n\n\n# üéõÔ∏è Inputs avec valeurs pr√©-remplies\ninputs = [gr.Number(label=\"Longitude\", value=-122.23),\n    gr.Number(label=\"Latitude\", value=37.88),\n    gr.Number(label=\"Housing Median Age\", value=41),\n    gr.Number(label=\"Total Rooms\", value=880),\n    gr.Number(label=\"Total Bedrooms\", value=129),\n    gr.Number(label=\"Population\", value=322),\n    gr.Number(label=\"Households\", value=126),\n    gr.Number(label=\"Median Income\", value=8.3252),\n    gr.Dropdown([\"INLAND\", \"<1H OCEAN\", \"NEAR BAY\", \"NEAR OCEAN\", \"ISLAND\"], label=\"Ocean Proximity\", value=\"NEAR BAY\")\n]\n\n# üß™ Interface Gradio\ndemo = gr.Interface(\n    fn=predict_price,\n    inputs=inputs,\n    outputs=[\"text\", \"plot\"],\n    title=\"üè† Pr√©diction du prix d'une maison en Californie\",\n    description=\"Entrez les caract√©ristiques d'une maison pour estimer son prix avec diff√©rents mod√®les de ML.\"\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T01:16:33.495942Z","iopub.execute_input":"2025-04-06T01:16:33.496578Z","iopub.status.idle":"2025-04-06T01:16:34.870453Z","shell.execute_reply.started":"2025-04-06T01:16:33.496547Z","shell.execute_reply":"2025-04-06T01:16:34.869783Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-06T00:50:38.686975Z","iopub.execute_input":"2025-04-06T00:50:38.687227Z","iopub.status.idle":"2025-04-06T00:50:38.702415Z","shell.execute_reply.started":"2025-04-06T00:50:38.687198Z","shell.execute_reply":"2025-04-06T00:50:38.701732Z"}},"outputs":[],"execution_count":null}]}